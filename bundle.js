(function (d3) {
  'use strict';

  const svg = d3.select('svg');

  const height = +svg.attr('height');
  const width = +svg.attr('width');

  const render = data => {
    
    const xValue = d => d.population;
    const yValue = d => d.country;
    const margin = { top:40, left:100, botton:20, right:40 };
    const innerWidth = width - margin.left - margin.top;
    const innerHeight = height - margin.top - margin.botton;
    const xScale = d3.scaleLinear()
    	.domain([0,d3.max(data, xValue)])
    	.range([0, innerWidth]);
    const yScale = d3.scaleBand()
    	.domain(data.map(yValue))
    	.range([0, innerHeight])
    	.padding(0.2);
    
    console.log(yScale.domain());
    
    const g = svg.append('g')
    	.attr('transform',`translate(${margin.left},       ${margin.top})`);
    const xAxisTickFormat = number => 
    	d3.format('.3s')(number).replace('G','B');
    
    const xAxis = d3.axisBottom(xScale).tickFormat(xAxisTickFormat);

    g.append('g')
      .call(d3.axisLeft(yScale))
    	.selectAll('.domain, .tick line')
    		.remove();
    g.append('g').call(xAxis)
    	.attr('transform',`translate(0, ${innerHeight})`)
      	.select('.domain')
    		.remove();
    g.selectAll('rect')
      .data(data)
      .enter()
      .append('rect')
    		.attr('y', d => yScale(yValue(d)))
  	    .attr('fill', 'black')
    		.attr('width', d => xScale(xValue(d)))
    		.attr('height', yScale.bandwidth());
    g.append('text')
    	.text('The 10 Most Populous Countries');
  };

  d3.csv('data.csv').then(data => {
    data.forEach(d => {
      d.population = +d.population * 1000;
    });
  	render(data);
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFxuICBzZWxlY3QsXG4gIGNzdiwgXG4gIHNjYWxlTGluZWFyLCBcbiAgc2NhbGVCYW5kLCBcbiAgbWF4LCBcbiAgYXhpc0xlZnQsXG4gIGF4aXNCb3R0b20sXG4gIGZvcm1hdFxufSBmcm9tICdkMydcblxuY29uc3Qgc3ZnID0gc2VsZWN0KCdzdmcnKVxuXG5jb25zdCBoZWlnaHQgPSArc3ZnLmF0dHIoJ2hlaWdodCcpXG5jb25zdCB3aWR0aCA9ICtzdmcuYXR0cignd2lkdGgnKVxuXG5jb25zdCByZW5kZXIgPSBkYXRhID0+IHtcbiAgXG4gIGNvbnN0IHhWYWx1ZSA9IGQgPT4gZC5wb3B1bGF0aW9uXG4gIGNvbnN0IHlWYWx1ZSA9IGQgPT4gZC5jb3VudHJ5XG4gIGNvbnN0IG1hcmdpbiA9IHsgdG9wOjQwLCBsZWZ0OjEwMCwgYm90dG9uOjIwLCByaWdodDo0MCB9XG4gIGNvbnN0IGlubmVyV2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnRvcFxuICBjb25zdCBpbm5lckhlaWdodCA9IGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9uXG4gIGNvbnN0IHhTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgXHQuZG9tYWluKFswLG1heChkYXRhLCB4VmFsdWUpXSlcbiAgXHQucmFuZ2UoWzAsIGlubmVyV2lkdGhdKVxuICBjb25zdCB5U2NhbGUgPSBzY2FsZUJhbmQoKVxuICBcdC5kb21haW4oZGF0YS5tYXAoeVZhbHVlKSlcbiAgXHQucmFuZ2UoWzAsIGlubmVySGVpZ2h0XSlcbiAgXHQucGFkZGluZygwLjIpXG4gIFxuICBjb25zb2xlLmxvZyh5U2NhbGUuZG9tYWluKCkpXG4gIFxuICBjb25zdCBnID0gc3ZnLmFwcGVuZCgnZycpXG4gIFx0LmF0dHIoJ3RyYW5zZm9ybScsYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgICAgICAgJHttYXJnaW4udG9wfSlgKVxuICBjb25zdCB4QXhpc1RpY2tGb3JtYXQgPSBudW1iZXIgPT4gXG4gIFx0Zm9ybWF0KCcuM3MnKShudW1iZXIpLnJlcGxhY2UoJ0cnLCdCJylcbiAgXG4gIGNvbnN0IHhBeGlzID0gYXhpc0JvdHRvbSh4U2NhbGUpLnRpY2tGb3JtYXQoeEF4aXNUaWNrRm9ybWF0KVxuXG4gIGcuYXBwZW5kKCdnJylcbiAgICAuY2FsbChheGlzTGVmdCh5U2NhbGUpKVxuICBcdC5zZWxlY3RBbGwoJy5kb21haW4sIC50aWNrIGxpbmUnKVxuICBcdFx0LnJlbW92ZSgpXG4gIGcuYXBwZW5kKCdnJykuY2FsbCh4QXhpcylcbiAgXHQuYXR0cigndHJhbnNmb3JtJyxgdHJhbnNsYXRlKDAsICR7aW5uZXJIZWlnaHR9KWApXG4gICAgXHQuc2VsZWN0KCcuZG9tYWluJylcbiAgXHRcdC5yZW1vdmUoKVxuICBnLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgLmRhdGEoZGF0YSlcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoJ3JlY3QnKVxuICBcdFx0LmF0dHIoJ3knLCBkID0+IHlTY2FsZSh5VmFsdWUoZCkpKVxuXHQgICAgLmF0dHIoJ2ZpbGwnLCAnYmxhY2snKVxuICBcdFx0LmF0dHIoJ3dpZHRoJywgZCA9PiB4U2NhbGUoeFZhbHVlKGQpKSlcbiAgXHRcdC5hdHRyKCdoZWlnaHQnLCB5U2NhbGUuYmFuZHdpZHRoKCkpXG4gIGcuYXBwZW5kKCd0ZXh0JylcbiAgXHQudGV4dCgnVGhlIDEwIE1vc3QgUG9wdWxvdXMgQ291bnRyaWVzJylcbn1cblxuY3N2KCdkYXRhLmNzdicpLnRoZW4oZGF0YSA9PiB7XG4gIGRhdGEuZm9yRWFjaChkID0+IHtcbiAgICBkLnBvcHVsYXRpb24gPSArZC5wb3B1bGF0aW9uICogMTAwMFxuICB9KVxuXHRyZW5kZXIoZGF0YSlcbn0pIl0sIm5hbWVzIjpbInNlbGVjdCIsInNjYWxlTGluZWFyIiwibWF4Iiwic2NhbGVCYW5kIiwiZm9ybWF0IiwiYXhpc0JvdHRv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